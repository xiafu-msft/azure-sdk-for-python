# Stubs for azure.storage.blob._shared.avro.schema (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc
from typing import Any, Optional

PY2: Any
logger: Any
DEBUG_VERBOSE: int
NULL: str
BOOLEAN: str
STRING: str
BYTES: str
INT: str
LONG: str
FLOAT: str
DOUBLE: str
FIXED: str
ENUM: str
RECORD: str
ERROR: str
ARRAY: str
MAP: str
UNION: str
REQUEST: str
ERROR_UNION: str
PRIMITIVE_TYPES: Any
NAMED_TYPES: Any
VALID_TYPES: Any
SCHEMA_RESERVED_PROPS: Any
FIELD_RESERVED_PROPS: Any
VALID_FIELD_SORT_ORDERS: Any

class Error(Exception): ...
class AvroException(Error): ...
class SchemaParseException(AvroException): ...

class Schema(metaclass=abc.ABCMeta):
    def __init__(self, data_type: Any, other_props: Optional[Any] = ...) -> None: ...
    @property
    def namespace(self): ...
    @property
    def type(self): ...
    @property
    def doc(self): ...
    @property
    def props(self): ...
    @property
    def other_props(self): ...
    @abc.abstractmethod
    def to_json(self, names: Any) -> Any: ...

class Name:
    def __init__(self, name: Any, namespace: Optional[Any] = ...) -> None: ...
    def __eq__(self, other: Any): ...
    @property
    def simple_name(self): ...
    @property
    def namespace(self): ...
    @property
    def fullname(self): ...

class Names:
    def __init__(self, default_namespace: Optional[Any] = ..., names: Optional[Any] = ...) -> None: ...
    @property
    def names(self): ...
    @property
    def default_namespace(self): ...
    def new_with_default_namespace(self, namespace: Any): ...
    def get_name(self, name: Any, namespace: Optional[Any] = ...): ...
    def get_schema(self, name: Any, namespace: Optional[Any] = ...): ...
    def prune_namespace(self, properties: Any): ...
    def register(self, schema: Any) -> None: ...

class NamedSchema(Schema, metaclass=abc.ABCMeta):
    def __init__(self, data_type: Any, name: Any, namespace: Optional[Any] = ..., names: Optional[Any] = ..., other_props: Optional[Any] = ...) -> None: ...
    @property
    def avro_name(self): ...
    @property
    def name(self): ...
    @property
    def namespace(self): ...
    @property
    def fullname(self): ...
    def name_ref(self, names: Any): ...
    @abc.abstractmethod
    def to_json(self, names: Any) -> Any: ...

class Field:
    def __init__(self, data_type: Any, name: Any, index: Any, has_default: Any, default: Any = ..., order: Optional[Any] = ..., doc: Optional[Any] = ..., other_props: Optional[Any] = ...) -> None: ...
    @property
    def type(self): ...
    @property
    def name(self): ...
    @property
    def index(self): ...
    @property
    def default(self): ...
    @property
    def has_default(self): ...
    @property
    def order(self): ...
    @property
    def doc(self): ...
    @property
    def props(self): ...
    @property
    def other_props(self): ...
    def to_json(self, names: Optional[Any] = ...): ...
    def __eq__(self, that: Any): ...

class PrimitiveSchema(Schema):
    def __init__(self, data_type: Any, other_props: Optional[Any] = ...) -> None: ...
    @property
    def name(self): ...
    @property
    def fullname(self): ...
    def to_json(self, names: Optional[Any] = ...): ...
    def __eq__(self, that: Any): ...

class FixedSchema(NamedSchema):
    def __init__(self, name: Any, namespace: Any, size: Any, names: Optional[Any] = ..., other_props: Optional[Any] = ...) -> None: ...
    @property
    def size(self): ...
    def to_json(self, names: Optional[Any] = ...): ...
    def __eq__(self, that: Any): ...

class EnumSchema(NamedSchema):
    def __init__(self, name: Any, namespace: Any, symbols: Any, names: Optional[Any] = ..., doc: Optional[Any] = ..., other_props: Optional[Any] = ...) -> None: ...
    @property
    def symbols(self): ...
    def to_json(self, names: Optional[Any] = ...): ...
    def __eq__(self, that: Any): ...

class ArraySchema(Schema):
    def __init__(self, items: Any, other_props: Optional[Any] = ...) -> None: ...
    @property
    def items(self): ...
    def to_json(self, names: Optional[Any] = ...): ...
    def __eq__(self, that: Any): ...

class MapSchema(Schema):
    def __init__(self, values: Any, other_props: Optional[Any] = ...) -> None: ...
    @property
    def values(self): ...
    def to_json(self, names: Optional[Any] = ...): ...
    def __eq__(self, that: Any): ...

class UnionSchema(Schema):
    def __init__(self, schemas: Any) -> None: ...
    @property
    def schemas(self): ...
    def to_json(self, names: Optional[Any] = ...): ...
    def __eq__(self, that: Any): ...

class ErrorUnionSchema(UnionSchema):
    def __init__(self, schemas: Any) -> None: ...
    def to_json(self, names: Optional[Any] = ...): ...

class RecordSchema(NamedSchema):
    @staticmethod
    def make_field_list(field_desc_list: Any, names: Any) -> None: ...
    def __init__(self, name: Any, namespace: Any, fields: Optional[Any] = ..., make_fields: Optional[Any] = ..., names: Optional[Any] = ..., record_type: Any = ..., doc: Optional[Any] = ..., other_props: Optional[Any] = ...) -> None: ...
    @property
    def fields(self): ...
    @property
    def field_map(self): ...
    def to_json(self, names: Optional[Any] = ...): ...
    def __eq__(self, that: Any): ...

def filter_keys_out(items: Any, keys: Any) -> None: ...
def schema_from_json_data(json_data: Any, names: Optional[Any] = ...): ...
def parse(json_string: Any): ...
